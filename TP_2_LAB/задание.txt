● Необходимо разделение на h и cpp файлы для каждого класса. Функция main должна
располагаться в отдельном cpp файле.
● Элемент очереди/стека/списка необходимо реализовать с помощью класса или
структуры.
● Необходимо работать с динамическим выделением памяти. Не использовать STL
библиотеку.
● Необходимо написать для каждого класса: необходимое число конструкторов (без
параметров, с параметрами, копирования) и деструктор.
● Необходимо реализовать передачу и возвращение объектов класса по значению, по
указателю и по ссылке.
● Реализовать пользовательское меню согласно заданию. Пользователю должны быть
доступны все действия по работе с объектом класса.
● Необходимо использовать аргументы по умолчанию и спецификатор explicit.
● Внимательно читайте задание. Перегрузка операторов возможна как для работы со
встроенными типами данных (числами), так и с экземплярами вашего класса.
● У пользователя должна быть возможность ввода, модификации и удаления значений
(обнуление) среди прочих доступных действий. Весь перечень действий необходимо определить
студенту самостоятельно исходя из задания и создаваемых классов. Например, при работе с
очередью необходимо иметь возможности очищения, добавления, удаления и пр.
● В main вид унарной операции должен иметь вид: a = b++; a = ++b; a = --b; a = b--. На
экран необходимо выводить a и b. Принцип действия постфиксных и префиксных операторов
должен быть сохранен.
● В main вид бинарной операции должен иметь вид: a = b + c. На экран необходимо
вывести a, b и с для проверки результата вычисления.
● Номер варианта соответствует номеру студента в списке. Каждому студенту
необходимо выполнить оба задания.

Вариант 23
• Задание 1 Унарная операция
Создать класс “Координаты”, который содержит три поля данных: x, y и z. Необходимо
перегрузить следующие операторы: оператор префиксного инкрементирования как метод для
увеличения на выбор пользователя одного поля данных класса на пользовательское число;
оператор постфиксного инкрементирования как дружественная функция для увеличения на выбор
пользователя одного поля данных класса на максимальное число среди хранимых классом
значений; оператор префиксного декрементирования как дружественная функция для уменьшения
на выбор пользователя одного поля данных класса на пользовательское число; оператор
постфиксного декрементиорвания как метод для увеличения на выбор пользователя одного поля
данных класса на минимальное число среди хранимых классом значений.
• Задание 2 Бинарная операция
Создать класс “Циклическая очередь”. Размер и значения очереди задаются случайными
числами (от 5 до 30). Необходимо перегрузить следующие арифметические операторы для работы
с другими экземплярами класса: +, -, /, *; арифметические операторы +=, -=, /=, *= для работы с
пользовательскими числами. На усмотрение студента остается решение какой оператор какой
перегрузки требует (метод или дружественная функция).
